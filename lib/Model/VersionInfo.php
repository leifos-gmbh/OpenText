<?php
/**
 * VersionInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openText API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: smeyer.ilias@gmx.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VersionInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VersionInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VersionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_date' => '\DateTime',
        'description' => 'string',
        'external_create_date' => '\DateTime',
        'external_identity' => 'string',
        'external_identity_type' => 'string',
        'external_modify_date' => '\DateTime',
        'external_source' => 'string',
        'file_create_date' => '\DateTime',
        'file_modify_date' => '\DateTime',
        'file_name' => 'string',
        'file_size' => 'string',
        'file_type' => 'string',
        'id' => 'int',
        'locked' => 'int',
        'locked_date' => 'string',
        'locked_user_id' => 'int',
        'mime_type' => 'string',
        'modify_date' => '\DateTime',
        'owner_id' => 'int',
        'provider_id' => 'string',
        'provider_name' => 'string',
        'version_id' => 'int',
        'version_number' => 'int',
        'version_major_number' => 'int',
        'version_minor_number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_date' => 'date-time',
        'description' => null,
        'external_create_date' => 'date',
        'external_identity' => null,
        'external_identity_type' => null,
        'external_modify_date' => 'date',
        'external_source' => null,
        'file_create_date' => 'date-time',
        'file_modify_date' => 'date-time',
        'file_name' => null,
        'file_size' => null,
        'file_type' => null,
        'id' => 'int32',
        'locked' => 'int32',
        'locked_date' => null,
        'locked_user_id' => 'int32',
        'mime_type' => null,
        'modify_date' => 'date-time',
        'owner_id' => 'int32',
        'provider_id' => null,
        'provider_name' => null,
        'version_id' => 'int32',
        'version_number' => 'int32',
        'version_major_number' => 'int32',
        'version_minor_number' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_date' => 'create_date',
        'description' => 'description',
        'external_create_date' => 'external_create_date',
        'external_identity' => 'external_identity',
        'external_identity_type' => 'external_identity_type',
        'external_modify_date' => 'external_modify_date',
        'external_source' => 'external_source',
        'file_create_date' => 'file_create_date',
        'file_modify_date' => 'file_modify_date',
        'file_name' => 'file_name',
        'file_size' => 'file_size',
        'file_type' => 'file_type',
        'id' => 'id',
        'locked' => 'locked',
        'locked_date' => 'locked_date',
        'locked_user_id' => 'locked_user_id',
        'mime_type' => 'mime_type',
        'modify_date' => 'modify_date',
        'owner_id' => 'owner_id',
        'provider_id' => 'provider_id',
        'provider_name' => 'provider_name',
        'version_id' => 'version_id',
        'version_number' => 'version_number',
        'version_major_number' => 'version_major_number',
        'version_minor_number' => 'version_minor_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'external_create_date' => 'setExternalCreateDate',
        'external_identity' => 'setExternalIdentity',
        'external_identity_type' => 'setExternalIdentityType',
        'external_modify_date' => 'setExternalModifyDate',
        'external_source' => 'setExternalSource',
        'file_create_date' => 'setFileCreateDate',
        'file_modify_date' => 'setFileModifyDate',
        'file_name' => 'setFileName',
        'file_size' => 'setFileSize',
        'file_type' => 'setFileType',
        'id' => 'setId',
        'locked' => 'setLocked',
        'locked_date' => 'setLockedDate',
        'locked_user_id' => 'setLockedUserId',
        'mime_type' => 'setMimeType',
        'modify_date' => 'setModifyDate',
        'owner_id' => 'setOwnerId',
        'provider_id' => 'setProviderId',
        'provider_name' => 'setProviderName',
        'version_id' => 'setVersionId',
        'version_number' => 'setVersionNumber',
        'version_major_number' => 'setVersionMajorNumber',
        'version_minor_number' => 'setVersionMinorNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'external_create_date' => 'getExternalCreateDate',
        'external_identity' => 'getExternalIdentity',
        'external_identity_type' => 'getExternalIdentityType',
        'external_modify_date' => 'getExternalModifyDate',
        'external_source' => 'getExternalSource',
        'file_create_date' => 'getFileCreateDate',
        'file_modify_date' => 'getFileModifyDate',
        'file_name' => 'getFileName',
        'file_size' => 'getFileSize',
        'file_type' => 'getFileType',
        'id' => 'getId',
        'locked' => 'getLocked',
        'locked_date' => 'getLockedDate',
        'locked_user_id' => 'getLockedUserId',
        'mime_type' => 'getMimeType',
        'modify_date' => 'getModifyDate',
        'owner_id' => 'getOwnerId',
        'provider_id' => 'getProviderId',
        'provider_name' => 'getProviderName',
        'version_id' => 'getVersionId',
        'version_number' => 'getVersionNumber',
        'version_major_number' => 'getVersionMajorNumber',
        'version_minor_number' => 'getVersionMinorNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['external_create_date'] = isset($data['external_create_date']) ? $data['external_create_date'] : null;
        $this->container['external_identity'] = isset($data['external_identity']) ? $data['external_identity'] : null;
        $this->container['external_identity_type'] = isset($data['external_identity_type']) ? $data['external_identity_type'] : null;
        $this->container['external_modify_date'] = isset($data['external_modify_date']) ? $data['external_modify_date'] : null;
        $this->container['external_source'] = isset($data['external_source']) ? $data['external_source'] : null;
        $this->container['file_create_date'] = isset($data['file_create_date']) ? $data['file_create_date'] : null;
        $this->container['file_modify_date'] = isset($data['file_modify_date']) ? $data['file_modify_date'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['locked_date'] = isset($data['locked_date']) ? $data['locked_date'] : null;
        $this->container['locked_user_id'] = isset($data['locked_user_id']) ? $data['locked_user_id'] : null;
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['provider_id'] = isset($data['provider_id']) ? $data['provider_id'] : null;
        $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
        $this->container['version_id'] = isset($data['version_id']) ? $data['version_id'] : null;
        $this->container['version_number'] = isset($data['version_number']) ? $data['version_number'] : null;
        $this->container['version_major_number'] = isset($data['version_major_number']) ? $data['version_major_number'] : null;
        $this->container['version_minor_number'] = isset($data['version_minor_number']) ? $data['version_minor_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date The version's creation date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The version description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets external_create_date
     *
     * @return \DateTime
     */
    public function getExternalCreateDate()
    {
        return $this->container['external_create_date'];
    }

    /**
     * Sets external_create_date
     *
     * @param \DateTime $external_create_date External create date. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setExternalCreateDate($external_create_date)
    {
        $this->container['external_create_date'] = $external_create_date;

        return $this;
    }

    /**
     * Gets external_identity
     *
     * @return string
     */
    public function getExternalIdentity()
    {
        return $this->container['external_identity'];
    }

    /**
     * Sets external_identity
     *
     * @param string $external_identity External identity. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setExternalIdentity($external_identity)
    {
        $this->container['external_identity'] = $external_identity;

        return $this;
    }

    /**
     * Gets external_identity_type
     *
     * @return string
     */
    public function getExternalIdentityType()
    {
        return $this->container['external_identity_type'];
    }

    /**
     * Sets external_identity_type
     *
     * @param string $external_identity_type External identity type. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setExternalIdentityType($external_identity_type)
    {
        $this->container['external_identity_type'] = $external_identity_type;

        return $this;
    }

    /**
     * Gets external_modify_date
     *
     * @return \DateTime
     */
    public function getExternalModifyDate()
    {
        return $this->container['external_modify_date'];
    }

    /**
     * Sets external_modify_date
     *
     * @param \DateTime $external_modify_date External modify date. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setExternalModifyDate($external_modify_date)
    {
        $this->container['external_modify_date'] = $external_modify_date;

        return $this;
    }

    /**
     * Gets external_source
     *
     * @return string
     */
    public function getExternalSource()
    {
        return $this->container['external_source'];
    }

    /**
     * Sets external_source
     *
     * @param string $external_source External source. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setExternalSource($external_source)
    {
        $this->container['external_source'] = $external_source;

        return $this;
    }

    /**
     * Gets file_create_date
     *
     * @return \DateTime
     */
    public function getFileCreateDate()
    {
        return $this->container['file_create_date'];
    }

    /**
     * Sets file_create_date
     *
     * @param \DateTime $file_create_date The creation date of the file used for the version. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setFileCreateDate($file_create_date)
    {
        $this->container['file_create_date'] = $file_create_date;

        return $this;
    }

    /**
     * Gets file_modify_date
     *
     * @return \DateTime
     */
    public function getFileModifyDate()
    {
        return $this->container['file_modify_date'];
    }

    /**
     * Sets file_modify_date
     *
     * @param \DateTime $file_modify_date The modification date of the file used for the version. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setFileModifyDate($file_modify_date)
    {
        $this->container['file_modify_date'] = $file_modify_date;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name The name of the file used for the version
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return string
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param string $file_size The data size of the file used for the version.
     *
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type The extension from the name of the file used for the version
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the version
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return int
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param int $locked Legacy
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets locked_date
     *
     * @return string
     */
    public function getLockedDate()
    {
        return $this->container['locked_date'];
    }

    /**
     * Sets locked_date
     *
     * @param string $locked_date Legacy
     *
     * @return $this
     */
    public function setLockedDate($locked_date)
    {
        $this->container['locked_date'] = $locked_date;

        return $this;
    }

    /**
     * Gets locked_user_id
     *
     * @return int
     */
    public function getLockedUserId()
    {
        return $this->container['locked_user_id'];
    }

    /**
     * Sets locked_user_id
     *
     * @param int $locked_user_id Legacy
     *
     * @return $this
     */
    public function setLockedUserId($locked_user_id)
    {
        $this->container['locked_user_id'] = $locked_user_id;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string $mime_type The MIME type for the version
     *
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date The modification date of the version
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int $owner_id The ID of the owner of the version
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string $provider_id The ID for the storage provider data
     *
     * @return $this
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string $provider_name The name of the storage provider
     *
     * @return $this
     */
    public function setProviderName($provider_name)
    {
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return int
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param int $version_id The ID of the version
     *
     * @return $this
     */
    public function setVersionId($version_id)
    {
        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets version_number
     *
     * @return int
     */
    public function getVersionNumber()
    {
        return $this->container['version_number'];
    }

    /**
     * Sets version_number
     *
     * @param int $version_number The version number
     *
     * @return $this
     */
    public function setVersionNumber($version_number)
    {
        $this->container['version_number'] = $version_number;

        return $this;
    }

    /**
     * Gets version_major_number
     *
     * @return int
     */
    public function getVersionMajorNumber()
    {
        return $this->container['version_major_number'];
    }

    /**
     * Sets version_major_number
     *
     * @param int $version_major_number The major version number. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setVersionMajorNumber($version_major_number)
    {
        $this->container['version_major_number'] = $version_major_number;

        return $this;
    }

    /**
     * Gets version_minor_number
     *
     * @return int
     */
    public function getVersionMinorNumber()
    {
        return $this->container['version_minor_number'];
    }

    /**
     * Sets version_minor_number
     *
     * @param int $version_minor_number The minor version number. This property will not be returned if the node is a Category.
     *
     * @return $this
     */
    public function setVersionMinorNumber($version_minor_number)
    {
        $this->container['version_minor_number'] = $version_minor_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


