<?php
/**
 * PropertiesDataResultsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openText API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: smeyer.ilias@gmx.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertiesDataResultsData Class Doc Comment
 *
 * @category Class
 * @description v2 propertiesDataResultsData
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertiesDataResultsData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'propertiesDataResultsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'container' => 'bool',
        'container_size' => 'int',
        'create_date' => '\DateTime',
        'description' => 'string',
        'external_create_date' => '\DateTime',
        'external_identity' => 'string',
        'external_identity_type' => 'string',
        'external_modify_date' => '\DateTime',
        'external_source' => 'string',
        'size' => 'int',
        'type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'container' => null,
        'container_size' => 'int32',
        'create_date' => 'date-time',
        'description' => null,
        'external_create_date' => 'date-time',
        'external_identity' => null,
        'external_identity_type' => null,
        'external_modify_date' => 'date-time',
        'external_source' => null,
        'size' => 'int32',
        'type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'container' => 'container',
        'container_size' => 'container_size',
        'create_date' => 'create_date',
        'description' => 'description',
        'external_create_date' => 'external_create_date',
        'external_identity' => 'external_identity',
        'external_identity_type' => 'external_identity_type',
        'external_modify_date' => 'external_modify_date',
        'external_source' => 'external_source',
        'size' => 'size',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'container' => 'setContainer',
        'container_size' => 'setContainerSize',
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'external_create_date' => 'setExternalCreateDate',
        'external_identity' => 'setExternalIdentity',
        'external_identity_type' => 'setExternalIdentityType',
        'external_modify_date' => 'setExternalModifyDate',
        'external_source' => 'setExternalSource',
        'size' => 'setSize',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'container' => 'getContainer',
        'container_size' => 'getContainerSize',
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'external_create_date' => 'getExternalCreateDate',
        'external_identity' => 'getExternalIdentity',
        'external_identity_type' => 'getExternalIdentityType',
        'external_modify_date' => 'getExternalModifyDate',
        'external_source' => 'getExternalSource',
        'size' => 'getSize',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['container'] = isset($data['container']) ? $data['container'] : null;
        $this->container['container_size'] = isset($data['container_size']) ? $data['container_size'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['external_create_date'] = isset($data['external_create_date']) ? $data['external_create_date'] : null;
        $this->container['external_identity'] = isset($data['external_identity']) ? $data['external_identity'] : null;
        $this->container['external_identity_type'] = isset($data['external_identity_type']) ? $data['external_identity_type'] : null;
        $this->container['external_modify_date'] = isset($data['external_modify_date']) ? $data['external_modify_date'] : null;
        $this->container['external_source'] = isset($data['external_source']) ? $data['external_source'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets container
     *
     * @return bool
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param bool $container Whether or not this item is a container
     *
     * @return $this
     */
    public function setContainer($container)
    {
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets container_size
     *
     * @return int
     */
    public function getContainerSize()
    {
        return $this->container['container_size'];
    }

    /**
     * Sets container_size
     *
     * @param int $container_size The number of items in this container
     *
     * @return $this
     */
    public function setContainerSize($container_size)
    {
        $this->container['container_size'] = $container_size;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date The date that the item was created
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the item
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets external_create_date
     *
     * @return \DateTime
     */
    public function getExternalCreateDate()
    {
        return $this->container['external_create_date'];
    }

    /**
     * Sets external_create_date
     *
     * @param \DateTime $external_create_date The external create date
     *
     * @return $this
     */
    public function setExternalCreateDate($external_create_date)
    {
        $this->container['external_create_date'] = $external_create_date;

        return $this;
    }

    /**
     * Gets external_identity
     *
     * @return string
     */
    public function getExternalIdentity()
    {
        return $this->container['external_identity'];
    }

    /**
     * Sets external_identity
     *
     * @param string $external_identity The external identity
     *
     * @return $this
     */
    public function setExternalIdentity($external_identity)
    {
        $this->container['external_identity'] = $external_identity;

        return $this;
    }

    /**
     * Gets external_identity_type
     *
     * @return string
     */
    public function getExternalIdentityType()
    {
        return $this->container['external_identity_type'];
    }

    /**
     * Sets external_identity_type
     *
     * @param string $external_identity_type The external identity type
     *
     * @return $this
     */
    public function setExternalIdentityType($external_identity_type)
    {
        $this->container['external_identity_type'] = $external_identity_type;

        return $this;
    }

    /**
     * Gets external_modify_date
     *
     * @return \DateTime
     */
    public function getExternalModifyDate()
    {
        return $this->container['external_modify_date'];
    }

    /**
     * Sets external_modify_date
     *
     * @param \DateTime $external_modify_date The external modify date
     *
     * @return $this
     */
    public function setExternalModifyDate($external_modify_date)
    {
        $this->container['external_modify_date'] = $external_modify_date;

        return $this;
    }

    /**
     * Gets external_source
     *
     * @return string
     */
    public function getExternalSource()
    {
        return $this->container['external_source'];
    }

    /**
     * Sets external_source
     *
     * @param string $external_source The external source
     *
     * @return $this
     */
    public function setExternalSource($external_source)
    {
        $this->container['external_source'] = $external_source;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The size of this item
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type An ID representing the type of the object
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


