<?php
/**
 * RegionData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openText API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * Contact: smeyer.ilias@gmx.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RegionData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegionData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RegionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'displayable' => 'bool',
        'display_name' => 'string',
        'facet' => 'bool',
        'name' => 'string',
        'queryable' => 'bool',
        'search_by_default' => 'bool',
        'sortable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'displayable' => null,
        'display_name' => null,
        'facet' => null,
        'name' => null,
        'queryable' => null,
        'search_by_default' => null,
        'sortable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displayable' => 'displayable',
        'display_name' => 'display_name',
        'facet' => 'facet',
        'name' => 'name',
        'queryable' => 'queryable',
        'search_by_default' => 'search_by_default',
        'sortable' => 'sortable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displayable' => 'setDisplayable',
        'display_name' => 'setDisplayName',
        'facet' => 'setFacet',
        'name' => 'setName',
        'queryable' => 'setQueryable',
        'search_by_default' => 'setSearchByDefault',
        'sortable' => 'setSortable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displayable' => 'getDisplayable',
        'display_name' => 'getDisplayName',
        'facet' => 'getFacet',
        'name' => 'getName',
        'queryable' => 'getQueryable',
        'search_by_default' => 'getSearchByDefault',
        'sortable' => 'getSortable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayable'] = isset($data['displayable']) ? $data['displayable'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['facet'] = isset($data['facet']) ? $data['facet'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['queryable'] = isset($data['queryable']) ? $data['queryable'] : null;
        $this->container['search_by_default'] = isset($data['search_by_default']) ? $data['search_by_default'] : null;
        $this->container['sortable'] = isset($data['sortable']) ? $data['sortable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets displayable
     *
     * @return bool
     */
    public function getDisplayable()
    {
        return $this->container['displayable'];
    }

    /**
     * Sets displayable
     *
     * @param bool $displayable Filter the results to show regions based on their displayable setting value
     *
     * @return $this
     */
    public function setDisplayable($displayable)
    {
        $this->container['displayable'] = $displayable;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The region's display name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets facet
     *
     * @return bool
     */
    public function getFacet()
    {
        return $this->container['facet'];
    }

    /**
     * Sets facet
     *
     * @param bool $facet Whether the region is a facet
     *
     * @return $this
     */
    public function setFacet($facet)
    {
        $this->container['facet'] = $facet;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the region
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets queryable
     *
     * @return bool
     */
    public function getQueryable()
    {
        return $this->container['queryable'];
    }

    /**
     * Sets queryable
     *
     * @param bool $queryable Whether the region is queryable, which allows users to choose the regions that appear as System Attributes on the Advanced Search Page
     *
     * @return $this
     */
    public function setQueryable($queryable)
    {
        $this->container['queryable'] = $queryable;

        return $this;
    }

    /**
     * Gets search_by_default
     *
     * @return bool
     */
    public function getSearchByDefault()
    {
        return $this->container['search_by_default'];
    }

    /**
     * Sets search_by_default
     *
     * @param bool $search_by_default Whether the region is searched automatically
     *
     * @return $this
     */
    public function setSearchByDefault($search_by_default)
    {
        $this->container['search_by_default'] = $search_by_default;

        return $this;
    }

    /**
     * Gets sortable
     *
     * @return bool
     */
    public function getSortable()
    {
        return $this->container['sortable'];
    }

    /**
     * Sets sortable
     *
     * @param bool $sortable Whether the region is sortable
     *
     * @return $this
     */
    public function setSortable($sortable)
    {
        $this->container['sortable'] = $sortable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


